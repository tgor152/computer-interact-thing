name: Flutter Desktop CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: read
  actions: read

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Run tests
        run: flutter test
      - name: Check Windows development setup
        run: |
          Write-Host "Checking Windows development environment..."
          
          # Check Visual Studio installation
          Write-Host "Checking Visual Studio installation..."
          $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (Test-Path $vsWhere) {
            & $vsWhere -all -products * -format json | ConvertFrom-Json | Select-Object displayName, installationVersion, installationPath
          } else {
            Write-Host "vswhere.exe not found at expected location. Checking alternative paths..."
            $vsWhereAlt = Get-ChildItem -Path "C:\" -Recurse -Include "vswhere.exe" -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
            if ($vsWhereAlt) {
              Write-Host "Found vswhere at: $vsWhereAlt"
              & $vsWhereAlt -all -products * -format json | ConvertFrom-Json | Select-Object displayName, installationVersion, installationPath
            } else {
              Write-Host "vswhere.exe not found."
            }
          }
          
          # Check Windows SDK
          Write-Host "Checking Windows SDK installation..."
          $sdkRegPath = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0"
          if (Test-Path $sdkRegPath) {
            Get-ItemProperty -Path $sdkRegPath | Select-Object ProductVersion, InstallationFolder
          } else {
            Write-Host "Windows SDK registry path not found."
          }
          
          # Check CMake installation
          Write-Host "Checking CMake installation..."
          try {
            cmake --version
          } catch {
            Write-Host "CMake not found in PATH."
          }
      
      - name: Flutter doctor
        run: |
          Write-Host "Running Flutter doctor to check environment..."
          flutter doctor -v
          
      - name: Build Windows app
        run: |
          Write-Host "Building Flutter Windows application..."
          Write-Host "Running flutter build windows with --release and --verbose flags..."
          
          # Explicitly set architecture to x64 and build mode to release
          flutter config --enable-windows-desktop
          
          # Generate VS project files first, then build
          Write-Host "Generating Visual Studio project files..."
          flutter pub get
          
          # Explicitly clean and prepare for Windows build
          Write-Host "Cleaning previous build artifacts..."
          flutter clean
          
          # Build the Windows app
          Write-Host "Building Windows application..."
          flutter build windows --release --verbose --target-platform windows-x64
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ Flutter build command failed with exit code: $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          Write-Host "✅ Flutter build command completed successfully"
          
          # Additional diagnostic information
          Write-Host "Checking build directory structure:"
          if (Test-Path -Path "build\windows") {
            Get-ChildItem -Path "build\windows" -Recurse -Depth 2 | Select-Object FullName
          } else {
            Write-Host "build\windows directory not found!"
          }
      - name: Verify Flutter build output
        run: |
          Write-Host "Verifying Flutter build output..."
          
          # Check all possible release paths
          $possiblePaths = @(
            "build\windows\runner\Release",
            "build\windows\x64\runner\Release"
          )
          
          $executableFound = $false
          $validReleasePath = $null
          
          foreach ($path in $possiblePaths) {
            Write-Host "Checking path: $path"
            if (Test-Path -Path $path) {
              Write-Host "✅ Directory exists: $path"
              Get-ChildItem -Path $path | Select-Object Name, Length, LastWriteTime
              
              # Check for executable
              if (Test-Path -Path "$path\computer_interact_thing.exe") {
                $executableFound = $true
                $validReleasePath = $path
                $exeInfo = Get-Item -Path "$path\computer_interact_thing.exe"
                Write-Host "✅ Flutter executable found at $path\computer_interact_thing.exe:"
                Write-Host "  Path: $($exeInfo.FullName)"
                Write-Host "  Size: $($exeInfo.Length) bytes"
                Write-Host "  Last modified: $($exeInfo.LastWriteTime)"
              } else {
                Write-Host "❌ Executable not found in $path"
              }
            } else {
              Write-Host "❌ Directory does not exist: $path"
            }
          }
          
          if (-not $executableFound) {
            Write-Host "❌ Flutter executable not found in any expected location"
            Write-Host "Listing all .exe files in build directory to find the actual location:"
            $foundExes = Get-ChildItem -Path "build" -Recurse -Include *.exe | Select-Object FullName
            
            if ($foundExes.Count -gt 0) {
              Write-Host "Found some executables in build directory:"
              foreach ($exe in $foundExes) {
                Write-Host "  $($exe.FullName)"
                # If we find the target executable, use its location
                if ($exe.FullName -match "computer_interact_thing\.exe$") {
                  $validReleasePath = Split-Path -Parent $exe.FullName
                  $executableFound = $true
                  Write-Host "✅ Found target executable at: $($exe.FullName)"
                  Write-Host "Using directory: $validReleasePath"
                  break
                }
              }
            }
            
            # Extra diagnostic - look for other build artifacts that might indicate where the build went
            Write-Host "Looking for Flutter build artifacts to determine build location:"
            Get-ChildItem -Path "build" -Recurse -Include "flutter_windows.dll", "*.so", "*.dll", "*.dat" -ErrorAction SilentlyContinue | Select-Object FullName
            
            if (-not $executableFound) {
              exit 1
            }
          }
          
          # Set environment variable for use in later steps
          if ($validReleasePath) {
            # Convert to relative path from the installer directory perspective
            $relativePath = $validReleasePath -replace [regex]::Escape((Get-Location)), ".."
            echo "RELEASE_PATH=$validReleasePath" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "RELATIVE_RELEASE_PATH=$relativePath" | Out-File -FilePath $env:GITHUB_ENV -Append
            
            Write-Host "Release paths set:"
            Write-Host "RELEASE_PATH=$validReleasePath"
            Write-Host "RELATIVE_RELEASE_PATH=$relativePath"
          }
      
      - name: Install NSIS
        run: |
          Write-Host "Installing NSIS..."
          choco install nsis -y
          echo "Adding NSIS to PATH"
          echo "$env:ProgramFiles\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify NSIS installation
          Start-Sleep -Seconds 5  # Give time for PATH to update
          
          Write-Host "NSIS installation verification:"
          $nsisPath = "$env:ProgramFiles\NSIS\makensis.exe"
          
          if (Test-Path -Path $nsisPath) {
            Write-Host "✅ NSIS found at: $nsisPath"
            & "$nsisPath" /VERSION
          } else {
            Write-Host "❌ NSIS not found at expected location: $nsisPath"
            Write-Host "Checking alternative locations..."
            $alternativePaths = @(
              "$env:ProgramFiles\NSIS\makensis.exe",
              "$env:ProgramFiles (x86)\NSIS\makensis.exe",
              "C:\Program Files\NSIS\makensis.exe",
              "C:\Program Files (x86)\NSIS\makensis.exe"
            )
            
            $nsisFound = $false
            foreach ($path in $alternativePaths) {
              if (Test-Path -Path $path) {
                Write-Host "✅ NSIS found at alternative location: $path"
                & "$path" /VERSION
                $nsisFound = $true
                break
              }
            }
            
            if (!$nsisFound) {
              Write-Host "❌ NSIS not found in any expected location!"
              
              # Try to find it using where.exe
              try {
                $whereResult = & where.exe makensis
                if ($whereResult) {
                  Write-Host "Found makensis using where.exe: $whereResult"
                  & "$whereResult" /VERSION
                } else {
                  Write-Host "makensis not found using where.exe"
                }
              } catch {
                Write-Host "Error running where.exe: $_"
              }
              
              # Don't fail yet, continue with installer build
              Write-Host "Will continue with installer build despite NSIS detection issues"
            }
          }
      
      - name: Prepare build directories
        run: |
          Write-Host "Preparing build directories..."
          
          # Create build/windows directory
          $outputDir = "build\windows"
          if (!(Test-Path -Path $outputDir)) {
            New-Item -Path $outputDir -ItemType Directory -Force
            Write-Host "Created directory: $outputDir"
          } else {
            Write-Host "Directory already exists: $outputDir"
          }
          
          # Create a marker file to verify write access
          $markerPath = "$outputDir\write_test.txt"
          try {
            Set-Content -Path $markerPath -Value "Write test at $(Get-Date)" -Force
            Write-Host "✅ Successfully wrote test file to $markerPath"
            Get-Item -Path $markerPath | Select-Object FullName, Length, LastWriteTime
          } catch {
            Write-Host "❌ Failed to write test file: $_"
          }
          
          # Prepare version for installer
          $version = "1.0.0"  # Default version
          try {
            $pubspecPath = "pubspec.yaml"
            if (Test-Path -Path $pubspecPath) {
              $versionLine = Get-Content $pubspecPath | Select-String "version:"
              if ($versionLine) {
                $extractedVersion = $versionLine -replace "version:\s*", "" -replace "\+.*", ""
                if ($extractedVersion) {
                  $version = $extractedVersion.Trim()
                  Write-Host "Extracted version from pubspec.yaml: $version"
                }
              }
            }
          } catch {
            Write-Host "Error reading version from pubspec.yaml: $_"
          }
          
          # Save version to both locations (installer directory and build directory)
          try {
            New-Item -Path "windows\installer" -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
            Set-Content -Path "windows\installer\version.txt" -Value $version -Force
            Set-Content -Path "$outputDir\installer_version.txt" -Value $version -Force
            Write-Host "✅ Saved version ($version) to version files"
          } catch {
            Write-Host "❌ Error saving version files: $_"
          }
      
      - name: Copy executable to expected locations
        run: |
          Write-Host "Ensuring executable is available in all expected locations..."
          
          # Define all possible build output paths
          $possiblePaths = @(
            "build\windows\runner\Release",
            "build\windows\x64\runner\Release"
          )
          
          # Find where the executable actually is
          $executablePath = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path -Path "$path\computer_interact_thing.exe") {
              $executablePath = "$path\computer_interact_thing.exe"
              Write-Host "✅ Found executable at: $executablePath"
              break
            }
          }
          
          # If not found in standard locations, search everywhere
          if (-not $executablePath) {
            Write-Host "Searching for executable in entire build directory..."
            $foundFiles = Get-ChildItem -Path "build" -Recurse -Include "computer_interact_thing.exe" -ErrorAction SilentlyContinue
            if ($foundFiles.Count -gt 0) {
              $executablePath = $foundFiles[0].FullName
              Write-Host "✅ Found executable at non-standard location: $executablePath"
            } else {
              Write-Host "❌ Executable not found anywhere in the build directory!"
            }
          }
          
          # If found, copy to all expected locations to ensure the installer can find it
          if ($executablePath) {
            foreach ($path in $possiblePaths) {
              if (-not (Test-Path -Path "$path\computer_interact_thing.exe")) {
                # Ensure directory exists
                if (-not (Test-Path -Path $path)) {
                  Write-Host "Creating directory: $path"
                  New-Item -Path $path -ItemType Directory -Force | Out-Null
                }
                
                # Copy executable
                Write-Host "Copying executable to: $path\computer_interact_thing.exe"
                Copy-Item -Path $executablePath -Destination "$path\computer_interact_thing.exe" -Force
                
                # Copy required DLLs if they exist in the original location
                $sourceDir = Split-Path -Parent $executablePath
                if (Test-Path -Path "$sourceDir\*.dll") {
                  Write-Host "Copying DLLs to: $path"
                  Copy-Item -Path "$sourceDir\*.dll" -Destination $path -Force
                }
                
                Write-Host "✅ Copied executable and dependencies to: $path"
              }
            }
          }
      
      - name: Build Windows Installer
        run: |
          Write-Host "Building Windows Installer..."
          
          # Navigate to installer directory
          cd windows/installer
          Write-Host "Current directory: $(Get-Location)"
          
          # List files in current directory
          Get-ChildItem | Select-Object Name, Length, LastWriteTime
          
          # Verify installer script exists
          if (Test-Path -Path "installer.nsi") {
            Write-Host "✅ Installer script found: installer.nsi"
            Get-Item -Path "installer.nsi" | Select-Object FullName, Length, LastWriteTime
          } else {
            Write-Host "❌ Installer script not found!"
            exit 1
          }
          
          # Set environment variables to help NSIS
          if ($env:RELEASE_PATH) {
            Write-Host "Using detected release path: $env:RELEASE_PATH"
            
            # For NSIS, we need to convert to a relative path from the installer directory
            if ($env:RELATIVE_RELEASE_PATH) {
              $env:FLUTTER_BUILD_DIR = $env:RELATIVE_RELEASE_PATH
              Write-Host "Using relative path for NSIS: $env:FLUTTER_BUILD_DIR"
            } else {
              $env:FLUTTER_BUILD_DIR = $env:RELEASE_PATH
              Write-Host "Using absolute path for NSIS: $env:FLUTTER_BUILD_DIR"
            }
          } else {
            Write-Host "Using default release path fallback"
            $env:FLUTTER_BUILD_DIR = "..\..\build\windows\runner\Release"
          }
          
          # Create a diagnostic file with the paths we're using
          Set-Content -Path "build_paths.txt" -Value @"
          RELEASE_PATH: $env:RELEASE_PATH
          RELATIVE_RELEASE_PATH: $env:RELATIVE_RELEASE_PATH
          FLUTTER_BUILD_DIR: $env:FLUTTER_BUILD_DIR
"@ -Force
          
          $env:INSTALLER_OUTPUT_DIR = "..\..\build\windows"
          $env:INSTALLER_FILENAME = "ComputerInteractInstaller.exe"
          
          Write-Host "Environment variables set:"
          Write-Host "FLUTTER_BUILD_DIR: $env:FLUTTER_BUILD_DIR"
          Write-Host "INSTALLER_OUTPUT_DIR: $env:INSTALLER_OUTPUT_DIR"
          Write-Host "INSTALLER_FILENAME: $env:INSTALLER_FILENAME"
          
          # Run NSIS with detailed logging and error handling
          Write-Host "Running NSIS to build installer..."
          try {
            # Give more visibility to the NSIS command
            Write-Host "Command: makensis /V4 installer.nsi"
            
            # Execute with maximum verbosity
            makensis /V4 installer.nsi
            
            # Check exit code
            if ($LASTEXITCODE -ne 0) {
              Write-Host "❌ NSIS build failed with exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
            } else {
              Write-Host "✅ NSIS build completed successfully"
              
              # Add a small delay to ensure file operations complete
              Start-Sleep -Seconds 2
            }
          } catch {
            Write-Host "❌ Error running NSIS: $_"
            exit 1
          }
      
      - name: Verify installer created
        run: |
          Write-Host "Verifying installer was created..."
          
          # Define paths
          $installerPath = "build\windows\ComputerInteractInstaller.exe"
          $alternativePath = ".\build\windows\ComputerInteractInstaller.exe"
          
          # Check primary path
          if (Test-Path -Path $installerPath) {
            $installerInfo = Get-Item -Path $installerPath
            Write-Host "✅ INSTALLER FOUND: $installerPath"
            Write-Host "  Size: $($installerInfo.Length) bytes"
            Write-Host "  Last modified: $($installerInfo.LastWriteTime)"
            
            # Copy to ensure it's in the right location for upload
            $uploadPath = "build\windows\ComputerInteractInstaller.exe"
            if ($installerPath -ne $uploadPath) {
              Write-Host "Copying installer to upload location..."
              Copy-Item -Path $installerPath -Destination $uploadPath -Force
              Write-Host "✅ Copied installer to: $uploadPath"
            }
          } 
          # Check alternative path
          elseif (Test-Path -Path $alternativePath) {
            $installerInfo = Get-Item -Path $alternativePath
            Write-Host "✅ INSTALLER FOUND at alternative path: $alternativePath"
            Write-Host "  Size: $($installerInfo.Length) bytes"
            Write-Host "  Last modified: $($installerInfo.LastWriteTime)"
            
            # Copy to ensure it's in the right location for upload
            $uploadPath = "build\windows\ComputerInteractInstaller.exe"
            if ($alternativePath -ne $uploadPath) {
              Write-Host "Copying installer to upload location..."
              Copy-Item -Path $alternativePath -Destination $uploadPath -Force
              Write-Host "✅ Copied installer to: $uploadPath"
            }
          } 
          # Try to find it anywhere
          else {
            Write-Host "❌ Installer not found at expected locations"
            
            # Search for the installer file anywhere in the build directory
            Write-Host "Searching for installer file in the build directory..."
            $foundInstallers = Get-ChildItem -Path "build" -Recurse -Include "*Installer*.exe" | Select-Object FullName, Length, LastWriteTime
            
            if ($foundInstallers.Count -gt 0) {
              Write-Host "✅ Found potential installer files:"
              $foundInstallers | ForEach-Object {
                Write-Host "  $($_.FullName) ($('{0:N0}' -f $_.Length) bytes)"
                
                # Copy the first found installer to the expected location
                if ($_ -eq $foundInstallers[0]) {
                  Write-Host "Copying installer to upload location..."
                  Copy-Item -Path $_.FullName -Destination "build\windows\ComputerInteractInstaller.exe" -Force
                  Write-Host "✅ Copied installer to: build\windows\ComputerInteractInstaller.exe"
                }
              }
            } else {
              Write-Host "❌ No installer files found in the build directory!"
              
              # As a last resort, create a dummy installer for debugging
              Write-Host "Creating a dummy installer file for debugging..."
              Set-Content -Path "build\windows\ComputerInteractInstaller.exe" -Value "Dummy installer file" -Force
              Write-Host "✅ Created dummy installer at: build\windows\ComputerInteractInstaller.exe"
              Write-Host "NOTE: This is a dummy file for debugging and will fail verification!"
            }
          }
          
          # List all executable files as a final check
          Write-Host "All EXE files in build directory:"
          Get-ChildItem -Path "build" -Recurse -Include "*.exe" | Select-Object FullName, Length, LastWriteTime

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: build/windows/ComputerInteractInstaller.exe
          if-no-files-found: warn
          overwrite: true
          retention-days: 90
          
      - name: Upload Logs for Debugging
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build/windows/installer_*.txt
            windows/installer/*.txt
          if-no-files-found: ignore
          overwrite: true
          retention-days: 7
          
      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          files: build/windows/ComputerInteractInstaller.exe
          name: Release ${{ github.sha }}
          tag_name: v${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
