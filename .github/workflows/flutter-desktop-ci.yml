name: Flutter Desktop CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Run tests
        run: flutter test
      - name: Build Windows app
        run: flutter build windows
      - name: Install NSIS
        run: |
          choco install nsis -y
          echo "Adding NSIS to PATH"
          echo "$env:ProgramFiles\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Build Windows Installer
        run: |
          # Create the build/windows directory if it doesn't exist
          if (!(Test-Path -Path "build\windows")) {
            New-Item -Path "build\windows" -ItemType Directory -Force
            Write-Host "Created build\windows directory"
          }
          
          # Check if the Release directory exists
          if (!(Test-Path -Path "build\windows\runner\Release")) {
            Write-Host "Warning: Release directory not found. Will attempt to build installer anyway."
          }
          
          # Navigate to installer directory
          cd windows/installer
          
          # Clear any previous version file
          if (Test-Path -Path "version.txt") {
            Remove-Item -Path "version.txt" -Force
            Write-Host "Removed previous version.txt file"
          }
          
          # Check pubspec.yaml version with improved error handling
          Write-Host "Reading version from pubspec.yaml..."
          try {
            $pubspecPath = "..\..\pubspec.yaml"
            if (Test-Path -Path $pubspecPath) {
              $versionLine = Get-Content $pubspecPath | Select-String "version:"
              Write-Host "Version line: $versionLine"
              if ($versionLine) {
                $version = $versionLine -replace "version:\s*", "" -replace "\+.*", ""
                Write-Host "Extracted version: $version"
                Set-Content -Path "version.txt" -Value $version.Trim() -Force
              } else {
                Write-Host "Version line not found in pubspec.yaml, using default version"
                Set-Content -Path "version.txt" -Value "1.0.0" -Force
              }
            } else {
              Write-Host "pubspec.yaml not found, using default version"
              Set-Content -Path "version.txt" -Value "1.0.0" -Force
            }
          } catch {
            Write-Host "Error reading version: $_"
            Write-Host "Using default version 1.0.0"
            Set-Content -Path "version.txt" -Value "1.0.0" -Force
          }
          
          # Verify NSIS installation
          Write-Host "NSIS installation verification:"
          $nsisPath = "$env:ProgramFiles\NSIS\makensis.exe"
          if (Test-Path -Path $nsisPath) {
            Write-Host "✅ NSIS found at: $nsisPath"
          } else {
            Write-Host "❌ NSIS not found at expected location: $nsisPath"
            Write-Host "Checking alternative locations..."
            $alternativePaths = @(
              "$env:ProgramFiles\NSIS\makensis.exe",
              "$env:ProgramFiles (x86)\NSIS\makensis.exe",
              "C:\Program Files\NSIS\makensis.exe",
              "C:\Program Files (x86)\NSIS\makensis.exe"
            )
            $nsisFound = $false
            foreach ($path in $alternativePaths) {
              if (Test-Path -Path $path) {
                Write-Host "✅ NSIS found at alternative location: $path"
                $nsisFound = $true
                break
              }
            }
            if (!$nsisFound) {
              Write-Host "NSIS not found in any expected location. This might cause the build to fail."
            }
          }
          
          # Run NSIS with detailed logging and error handling
          Write-Host "Running NSIS script to build installer..."
          try {
            makensis /V4 installer.nsi
            if ($LASTEXITCODE -ne 0) {
              Write-Host "❌ NSIS build failed with exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
            } else {
              Write-Host "✅ NSIS build completed successfully"
            }
          } catch {
            Write-Host "❌ Error running NSIS: $_"
            exit 1
          }
          
          # Verify the installer was created
          $installerPath = "..\..\build\windows\ComputerInteractInstaller.exe"
          if (Test-Path -Path $installerPath) {
            $installerInfo = Get-Item -Path $installerPath
            Write-Host "✅ Installer created successfully:"
            Write-Host "  Path: $($installerInfo.FullName)"
            Write-Host "  Size: $($installerInfo.Length) bytes"
            Write-Host "  Last modified: $($installerInfo.LastWriteTime)"
          } else {
            Write-Host "❌ Installer not created at expected path: $installerPath"
            exit 1
          }
          
      - name: Enhanced debugging for installer files
        run: |
          Write-Host "====== INSTALLER BUILD DEBUGGING ======"
          Write-Host "Current working directory: $(Get-Location)"
          
          # List all exe files in the build directory
          Write-Host "All EXE files in build directory:"
          Get-ChildItem -Path build -Recurse -Include *.exe | Select-Object FullName, Name, Length, LastWriteTime
          
          # Check specifically for our simplified installer file
          Write-Host "Checking for ComputerInteractInstaller.exe:"
          $installerPath = "build\windows\ComputerInteractInstaller.exe"
          
          if (Test-Path -Path $installerPath) {
            Write-Host "✅ INSTALLER FOUND: $installerPath"
            $installerInfo = Get-Item -Path $installerPath
            Write-Host "Installer details:"
            Write-Host "  Full path: $($installerInfo.FullName)"
            Write-Host "  Size: $($installerInfo.Length) bytes"
            Write-Host "  Last modified: $($installerInfo.LastWriteTime)"
            
            # Check if version file exists
            if (Test-Path -Path "build\windows\installer_version.txt") {
              $version = Get-Content -Path "build\windows\installer_version.txt"
              Write-Host "  Version from file: $version"
            }
          } else {
            Write-Host "❌ INSTALLER NOT FOUND at expected location: $installerPath"
            
            # Show all files in the windows build directory
            Write-Host "Contents of build\windows directory:"
            if (Test-Path -Path "build\windows") {
              Get-ChildItem -Path "build\windows" -Recurse | Select-Object FullName, Name, Length, LastWriteTime
            } else {
              Write-Host "build\windows directory doesn't exist!"
              Write-Host "Listing contents of build directory:"
              Get-ChildItem -Path "build" -Recurse | Select-Object FullName, Name
            }
            
            # Exit with error if installer is not found
            Write-Host "Installer build failed or file not found in expected location"
            exit 1
          }

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: build/windows/ComputerInteractInstaller.exe
          if-no-files-found: error
          overwrite: true
          retention-days: 90
      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: build/windows/ComputerInteractInstaller.exe
          name: Release ${{ github.sha }}
          tag_name: v${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
